using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
namespace DrzewoBinarne
{
	internal class BinaryTreeNode<T> : IEnumerable<T>, IEnumerable
	{
		private class TreeDFSEnumerator : IEnumerator<T>, IDisposable, IEnumerator
		{
			private Queue<T> Data = null;
			private BinaryTreeNode<T> Root;
			private T CurrentValue;
			public T Current
			{
				get
				{
					if (this.Data == null)
					{
						throw new InvalidOperationException("Call MoveNext method before calling Current property.");
					}
					return this.CurrentValue;
				}
			}
			object IEnumerator.Current
			{
				get
				{
					return this.Current;
				}
			}
			public TreeDFSEnumerator(BinaryTreeNode<T> tree)
			{
				this.Root = tree;
			}
			private void Traverse(BinaryTreeNode<T> tree)
			{
				this.Data.Enqueue(tree.Value);
				if (tree.Left != null)
				{
					this.Traverse(tree.Left);
				}
				if (tree.Right != null)
				{
					this.Traverse(tree.Right);
				}
			}
			public void Dispose()
			{
			}
			public bool MoveNext()
			{
				if (this.Data == null)
				{
					this.Data = new Queue<T>();
					this.Traverse(this.Root);
				}
				bool result;
				if (this.Data.Count > 0)
				{
					this.CurrentValue = this.Data.Dequeue();
					result = true;
				}
				else
				{
					result = false;
				}
				return result;
			}
			public void Reset()
			{
				this.Data = null;
				this.Traverse(this.Root);
			}
		}
		private class TreeBFSEnumerator : IEnumerator<T>, IDisposable, IEnumerator
		{
			private Queue<T> Data = null;
			private BinaryTreeNode<T> Root;
			private T CurrentValue;
			public T Current
			{
				get
				{
					if (this.Data == null)
					{
						throw new InvalidOperationException("Call MoveNext method before calling Current property.");
					}
					return this.CurrentValue;
				}
			}
			object IEnumerator.Current
			{
				get
				{
					return this.Current;
				}
			}
			public TreeBFSEnumerator(BinaryTreeNode<T> tree)
			{
				this.Root = tree;
			}
			private void Traverse(BinaryTreeNode<T> tree)
			{
				Queue<BinaryTreeNode<T>> tmp = new Queue<BinaryTreeNode<T>>();
				tmp.Enqueue(tree);
				while (tmp.Count > 0)
				{
					BinaryTreeNode<T> i = tmp.Dequeue();
					this.Data.Enqueue(i.Value);
					if (i.Left != null)
					{
						tmp.Enqueue(i.Left);
					}
					if (i.Right != null)
					{
						tmp.Enqueue(i.Right);
					}
				}
			}
			public void Dispose()
			{
			}
			public bool MoveNext()
			{
				if (this.Data == null)
				{
					this.Data = new Queue<T>();
					this.Traverse(this.Root);
				}
				bool result;
				if (this.Data.Count > 0)
				{
					this.CurrentValue = this.Data.Dequeue();
					result = true;
				}
				else
				{
					result = false;
				}
				return result;
			}
			public void Reset()
			{
				this.Data = null;
				this.Traverse(this.Root);
			}
		}
		[CompilerGenerated]
		private sealed class <GetDFSEnumerator>d__0 : IEnumerator<T>, IEnumerator, IDisposable
		{
			private T <>2__current;
			private int <>1__state;
			public BinaryTreeNode<T> <>4__this;
			public T <child>5__1;
			public T <child>5__2;
			public IEnumerator<T> <>7__wrap3;
			public IEnumerator<T> <>7__wrap5;
			T IEnumerator<T>.Current
			{
				[DebuggerHidden]
				get
				{
					return this.<>2__current;
				}
			}
			object IEnumerator.Current
			{
				[DebuggerHidden]
				get
				{
					return this.<>2__current;
				}
			}
			bool IEnumerator.MoveNext()
			{
				bool result;
				try
				{
					switch (this.<>1__state)
					{
					case 0:
						this.<>1__state = -1;
						this.<>2__current = this.<>4__this.Value;
						this.<>1__state = 1;
						result = true;
						return result;
					case 1:
						this.<>1__state = -1;
						if (this.<>4__this.Left != null)
						{
							this.<>7__wrap3 = this.<>4__this.Left.GetEnumerator();
							this.<>1__state = 2;
							goto IL_CF;
						}
						goto IL_E6;
					case 3:
						this.<>1__state = 2;
						goto IL_CF;
					case 5:
						this.<>1__state = 4;
						goto IL_14A;
					}
					goto IL_162;
					IL_CF:
					if (this.<>7__wrap3.MoveNext())
					{
						this.<child>5__1 = this.<>7__wrap3.Current;
						this.<>2__current = this.<child>5__1;
						this.<>1__state = 3;
						result = true;
						return result;
					}
					this.<>m__Finally4();
					IL_E6:
					if (this.<>4__this.Right == null)
					{
						goto IL_161;
					}
					this.<>7__wrap5 = this.<>4__this.Right.GetEnumerator();
					this.<>1__state = 4;
					IL_14A:
					if (this.<>7__wrap5.MoveNext())
					{
						this.<child>5__2 = this.<>7__wrap5.Current;
						this.<>2__current = this.<child>5__2;
						this.<>1__state = 5;
						result = true;
						return result;
					}
					this.<>m__Finally6();
					IL_161:
					IL_162:
					result = false;
				}
				catch
				{
					this.System.IDisposable.Dispose();
					throw;
				}
				return result;
			}
			[DebuggerHidden]
			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}
			void IDisposable.Dispose()
			{
				switch (this.<>1__state)
				{
				case 2:
					break;
				case 3:
					break;
				default:
					goto IL_2A;
				}
				try
				{
				}
				finally
				{
					this.<>m__Finally4();
				}
				IL_2A:
				switch (this.<>1__state)
				{
				case 4:
					break;
				case 5:
					break;
				default:
					return;
				}
				try
				{
				}
				finally
				{
					this.<>m__Finally6();
				}
			}
			[DebuggerHidden]
			public <GetDFSEnumerator>d__0(int <>1__state)
			{
				this.<>1__state = <>1__state;
			}
			private void <>m__Finally4()
			{
				this.<>1__state = -1;
				if (this.<>7__wrap3 != null)
				{
					this.<>7__wrap3.Dispose();
				}
			}
			private void <>m__Finally6()
			{
				this.<>1__state = -1;
				if (this.<>7__wrap5 != null)
				{
					this.<>7__wrap5.Dispose();
				}
			}
		}
		[CompilerGenerated]
		private sealed class <GetBFSEnumerator>d__8 : IEnumerator<T>, IEnumerator, IDisposable
		{
			private T <>2__current;
			private int <>1__state;
			public BinaryTreeNode<T> <>4__this;
			public Queue<BinaryTreeNode<T>> <q>5__9;
			public BinaryTreeNode<T> <n>5__a;
			T IEnumerator<T>.Current
			{
				[DebuggerHidden]
				get
				{
					return this.<>2__current;
				}
			}
			object IEnumerator.Current
			{
				[DebuggerHidden]
				get
				{
					return this.<>2__current;
				}
			}
			bool IEnumerator.MoveNext()
			{
				switch (this.<>1__state)
				{
				case 0:
					this.<>1__state = -1;
					this.<q>5__9 = new Queue<BinaryTreeNode<T>>();
					this.<q>5__9.Enqueue(this.<>4__this);
					break;
				case 1:
					this.<>1__state = -1;
					if (this.<n>5__a.Left != null)
					{
						this.<q>5__9.Enqueue(this.<n>5__a.Left);
					}
					if (this.<n>5__a.Right != null)
					{
						this.<q>5__9.Enqueue(this.<n>5__a.Right);
					}
					break;
				default:
					goto IL_EC;
				}
				bool result;
				if (this.<q>5__9.Count > 0)
				{
					this.<n>5__a = this.<q>5__9.Dequeue();
					this.<>2__current = this.<n>5__a.Value;
					this.<>1__state = 1;
					result = true;
					return result;
				}
				IL_EC:
				result = false;
				return result;
			}
			[DebuggerHidden]
			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}
			void IDisposable.Dispose()
			{
			}
			[DebuggerHidden]
			public <GetBFSEnumerator>d__8(int <>1__state)
			{
				this.<>1__state = <>1__state;
			}
		}
		public T Value
		{
			get;
			protected set;
		}
		public BinaryTreeNode<T> Left
		{
			get;
			protected set;
		}
		public BinaryTreeNode<T> Right
		{
			get;
			protected set;
		}
		public BinaryTreeNode(BinaryTreeNode<T> Left, T Value, BinaryTreeNode<T> Right)
		{
			this.Left = Left;
			this.Value = Value;
			this.Right = Right;
		}
		public BinaryTreeNode(T Value) : this(null, Value, null)
		{
		}
		public IEnumerator<T> GetTraditionalDFSEnumerator()
		{
			return new BinaryTreeNode<T>.TreeDFSEnumerator(this);
		}
		public IEnumerator<T> GetDFSEnumerator()
		{
			BinaryTreeNode<T>.<GetDFSEnumerator>d__0 <GetDFSEnumerator>d__ = new BinaryTreeNode<T>.<GetDFSEnumerator>d__0(0);
			<GetDFSEnumerator>d__.<>4__this = this;
			return <GetDFSEnumerator>d__;
		}
		public IEnumerator<T> GetTraditionalBFSEnumerator()
		{
			return new BinaryTreeNode<T>.TreeBFSEnumerator(this);
		}
		public IEnumerator<T> GetBFSEnumerator()
		{
			BinaryTreeNode<T>.<GetBFSEnumerator>d__8 <GetBFSEnumerator>d__ = new BinaryTreeNode<T>.<GetBFSEnumerator>d__8(0);
			<GetBFSEnumerator>d__.<>4__this = this;
			return <GetBFSEnumerator>d__;
		}
		public IEnumerator<T> GetEnumerator()
		{
			return this.GetBFSEnumerator();
		}
		IEnumerator IEnumerable.GetEnumerator()
		{
			return this.GetEnumerator();
		}
	}
}
